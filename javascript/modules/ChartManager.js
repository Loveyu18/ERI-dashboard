/**
 * ÂúñË°®ÁÆ°ÁêÜÂô®Ê®°ÁµÑ
 * Ë≤†Ë≤¨ CO2 ÂúñË°®ÁöÑÂàùÂßãÂåñ„ÄÅÊõ¥Êñ∞ÂíåÈÖçÁΩÆ
 */

import { CONFIG } from '../config/constants.js';
import { HELPERS } from '../utils/helpers.js';

export class ChartManager {
    constructor(options = {}) {
        this.containerId = options.containerId || 'co2-chart';
        this.config = { ...CONFIG.CHART, ...options.config };
        this.chart = null;
        this.isInitialized = false;
    }

    /**
     * ÂàùÂßãÂåñÂúñË°®
     */
    async init() {
        try {
            const container = document.getElementById(this.containerId);
            if (!container) {
                throw new Error(`ÂúñË°®ÂÆπÂô®‰∏çÂ≠òÂú®: ${this.containerId}`);
            }

            // Ê™¢Êü• Chart.js ÊòØÂê¶Â∑≤ËºâÂÖ•
            if (typeof Chart === 'undefined') {
                throw new Error('Chart.js Â∞öÊú™ËºâÂÖ•');
            }

            // Ê∏ÖÁêÜÁèæÊúâÂúñË°®
            if (this.chart) {
                this.chart.destroy();
            }

            // Âª∫Á´ãÊñ∞ÂúñË°®
            this.chart = new Chart(container, this.getChartConfig());
            this.isInitialized = true;
            
            console.log('‚úÖ ÂúñË°®ÂàùÂßãÂåñÂÆåÊàê');
            
        } catch (error) {
            console.error('‚ùå ÂúñË°®ÂàùÂßãÂåñÂ§±Êïó:', error);
            throw error;
        }
    }

    /**
     * Áç≤ÂèñÂúñË°®ÈÖçÁΩÆ
     */
    getChartConfig() {
        return {
            type: 'line',
            data: {
                labels: [],
                datasets: []
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    mode: 'index',
                    intersect: false,
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'CO2 ÊøÉÂ∫¶Áõ£Êéß',
                        font: {
                            size: 16,
                            weight: 'bold'
                        }
                    },
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            padding: 20
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: '#fff',
                        bodyColor: '#fff',
                        borderColor: '#ddd',
                        borderWidth: 1,
                        callbacks: {
                            title: (tooltipItems) => {
                                return `ÊôÇÈñì: ${tooltipItems[0].label}`;
                            },
                            label: (context) => {
                                const value = context.parsed.y;
                                const room = context.dataset.label;
                                const level = this.getCO2Level(value);
                                return `${room}: ${value} ppm (${level})`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        type: 'category',
                        title: {
                            display: true,
                            text: 'ÊôÇÈñì'
                        },
                        ticks: {
                            maxTicksLimit: 10,
                            callback: function(value, index) {
                                const labels = this.getLabelForValue(value);
                                return labels.split(' ')[1] || labels; // Âè™È°ØÁ§∫ÊôÇÈñìÈÉ®ÂàÜ
                            }
                        }
                    },
                    y: {
                        type: 'linear',
                        position: 'left',
                        title: {
                            display: true,
                            text: 'CO2 ÊøÉÂ∫¶ (ppm)'
                        },
                        min: 0,
                        max: 2000,
                        ticks: {
                            stepSize: 200,
                            callback: function(value) {
                                return value + ' ppm';
                            }
                        },
                        grid: {
                            color: function(context) {
                                // Ê®ôÊ∫ñÁ∑öÈ°èËâ≤
                                if (context.tick.value === 1000) return '#ff6b6b';
                                if (context.tick.value === 800) return '#ffa500';
                                if (context.tick.value === 600) return '#32cd32';
                                return '#e0e0e0';
                            },
                            lineWidth: function(context) {
                                // Ê®ôÊ∫ñÁ∑öÂØ¨Â∫¶
                                if ([600, 800, 1000].includes(context.tick.value)) return 2;
                                return 1;
                            }
                        }
                    }
                },
                animation: {
                    duration: 750,
                    easing: 'easeInOutQuart'
                }
            }
        };
    }

    /**
     * Êõ¥Êñ∞ÂúñË°®Êï∏Êìö
     */
    updateChart(data) {
        if (!this.isInitialized || !this.chart) {
            console.warn('‚ö†Ô∏è ÂúñË°®Â∞öÊú™ÂàùÂßãÂåñ');
            return;
        }

        try {
            const chartData = this.prepareChartData(data);
            
            // Êõ¥Êñ∞ÂúñË°®Êï∏Êìö
            this.chart.data.labels = chartData.labels;
            this.chart.data.datasets = chartData.datasets;
            
            // ÈáçÊñ∞Áπ™Ë£ΩÂúñË°®
            this.chart.update('none'); // ‰∏ç‰ΩøÁî®ÂãïÁï´‰ª•ÊèêÈ´òÊÄßËÉΩ
            
            console.log('üìä ÂúñË°®Â∑≤Êõ¥Êñ∞');
            
        } catch (error) {
            console.error('‚ùå ÂúñË°®Êõ¥Êñ∞Â§±Êïó:', error);
        }
    }

    /**
     * Êõ¥Êñ∞ÊØîËºÉÊ®°ÂºèÂúñË°®
     */
    updateCompareChart(todayData, compareData) {
        if (!this.isInitialized || !this.chart) {
            console.warn('‚ö†Ô∏è ÂúñË°®Â∞öÊú™ÂàùÂßãÂåñ');
            return;
        }

        try {
            const todayChartData = this.prepareChartData(todayData, '‰ªäÊó•');
            const compareChartData = this.prepareChartData(compareData, 'ÊØîËºÉÊó•Êúü');
            
            // Âêà‰ΩµÊ®ôÁ±§Ôºà‰ΩøÁî®ËºÉÈï∑ÁöÑÊôÇÈñìËª∏Ôºâ
            const allLabels = [...new Set([
                ...todayChartData.labels,
                ...compareChartData.labels
            ])].sort();
            
            // Âêà‰ΩµÊï∏ÊìöÈõÜ
            const datasets = [];
            
            // ‰ªäÊó•Êï∏ÊìöÔºàÂØ¶Á∑öÔºâ
            todayChartData.datasets.forEach(dataset => {
                datasets.push({
                    ...dataset,
                    label: `${dataset.label} (‰ªäÊó•)`,
                    borderDash: []
                });
            });
            
            // ÊØîËºÉÊï∏ÊìöÔºàËôõÁ∑öÔºâ
            compareChartData.datasets.forEach(dataset => {
                datasets.push({
                    ...dataset,
                    label: `${dataset.label} (ÊØîËºÉ)`,
                    borderDash: [5, 5],
                    backgroundColor: dataset.backgroundColor + '40', // Èôç‰ΩéÈÄèÊòéÂ∫¶
                    borderColor: dataset.borderColor
                });
            });
            
            // Êõ¥Êñ∞ÂúñË°®
            this.chart.data.labels = allLabels;
            this.chart.data.datasets = datasets;
            this.chart.update();
            
            console.log('üìä ÊØîËºÉÂúñË°®Â∑≤Êõ¥Êñ∞');
            
        } catch (error) {
            console.error('‚ùå ÊØîËºÉÂúñË°®Êõ¥Êñ∞Â§±Êïó:', error);
        }
    }

    /**
     * Ê∫ñÂÇôÂúñË°®Êï∏Êìö
     */
    prepareChartData(data, labelSuffix = '') {
        if (!data || !Array.isArray(data) || data.length === 0) {
            return { labels: [], datasets: [] };
        }

        // ÊåâÊôÇÈñìÊéíÂ∫è
        const sortedData = [...data].sort((a, b) => 
            new Date(a.timestamp) - new Date(b.timestamp)
        );

        // ÂèñÂæóÊâÄÊúâÊôÇÈñìÈªû
        const timePoints = [...new Set(sortedData.map(item => item.timestamp))];
        
        // ÂèñÂæóÊâÄÊúâÊàøÈñì
        const rooms = [...new Set(sortedData.map(item => item.room))];
        
        // Ê†ºÂºèÂåñÊôÇÈñìÊ®ôÁ±§
        const labels = timePoints.map(timestamp => 
            HELPERS.formatTime(timestamp)
        );

        // ÁÇ∫ÊØèÂÄãÊàøÈñìÂª∫Á´ãÊï∏ÊìöÈõÜ
        const datasets = rooms.map(room => {
            const roomData = sortedData.filter(item => item.room === room);
            const values = timePoints.map(timestamp => {
                const dataPoint = roomData.find(item => item.timestamp === timestamp);
                return dataPoint ? dataPoint.co2 : null;
            });

            const color = this.getRoomColor(room);
            const roomDisplayName = CONFIG.ROOM_NAMES[room] || room;
            
            return {
                label: roomDisplayName + (labelSuffix ? ` ${labelSuffix}` : ''),
                data: values,
                borderColor: color,
                backgroundColor: color + '20',
                borderWidth: 2,
                pointRadius: 3,
                pointHoverRadius: 5,
                fill: false,
                tension: 0.4,
                spanGaps: true
            };
        });

        return { labels, datasets };
    }

    /**
     * Áç≤ÂèñÊàøÈñìÈ°èËâ≤
     */
    getRoomColor(room) {
        const colors = {
            'a202': '#ff6b6b',
            'a203': '#4ecdc4',
            'a204': '#45b7d1',
            'a205': '#f9ca24',
            'a206': '#6c5ce7',
            'a207': '#fd79a8',
            'a208': '#00b894',
            'a209': '#e17055'
        };
        
        return colors[room] || '#95a5a6';
    }

    /**
     * Áç≤Âèñ CO2 ÊøÉÂ∫¶Á≠âÁ¥ö
     */
    getCO2Level(value) {
        if (value < 600) return 'ÂÑ™ËâØ';
        if (value < 800) return 'ËâØÂ•Ω';
        if (value < 1000) return 'ÊôÆÈÄö';
        return '‰∏ç‰Ω≥';
    }

    /**
     * ÈáçÁΩÆÂúñË°®
     */
    reset() {
        if (this.chart) {
            this.chart.data.labels = [];
            this.chart.data.datasets = [];
            this.chart.update();
        }
    }

    /**
     * Ê∏ÖÁêÜË≥áÊ∫ê
     */
    cleanup() {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
        this.isInitialized = false;
    }

    /**
     * Áç≤ÂèñÂúñË°®ÂØ¶‰æãÔºà‰æõÈÄ≤Èöé‰ΩøÁî®Ôºâ
     */
    getChart() {
        return this.chart;
    }

    /**
     * ‰∏ãËºâÂúñË°®ÁÇ∫ÂúñÁâá
     */
    downloadChart(filename = 'co2-chart.png') {
        if (!this.chart) return;

        try {
            const link = document.createElement('a');
            link.download = filename;
            link.href = this.chart.toBase64Image();
            link.click();
            
            console.log('üì∏ ÂúñË°®Â∑≤‰∏ãËºâ:', filename);
            
        } catch (error) {
            console.error('‚ùå ÂúñË°®‰∏ãËºâÂ§±Êïó:', error);
        }
    }
}
